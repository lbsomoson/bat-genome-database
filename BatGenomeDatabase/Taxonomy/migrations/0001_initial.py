# Generated by Django 3.2 on 2021-05-18 07:52

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('gender', models.CharField(max_length=150)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('gender', models.CharField(max_length=150)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('gender', models.CharField(max_length=150)),
                ('rna_gene', models.CharField(max_length=2056)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.family')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('gender', models.CharField(max_length=150)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.class')),
            ],
        ),
        migrations.CreateModel(
            name='Phylum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('etymology', models.CharField(max_length=256)),
                ('emendation', models.CharField(max_length=150)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.domain')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('basonym', models.CharField(max_length=150)),
                ('etymology', models.CharField(max_length=256)),
                ('gender', models.CharField(max_length=150)),
                ('rna_gene', models.CharField(max_length=2056)),
                ('proposed_as', models.CharField(max_length=150)),
                ('publication', models.CharField(max_length=150)),
                ('publication_status', models.CharField(max_length=150)),
                ('IJSEM_list', models.CharField(max_length=150)),
                ('notes', models.CharField(max_length=150)),
                ('reference_list', models.JSONField()),
                ('nomenclature_status', models.CharField(max_length=150)),
                ('taxonomic_status', models.CharField(max_length=150)),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.genus')),
            ],
        ),
        migrations.CreateModel(
            name='Phylum_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.class')),
                ('phylum_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.phylum')),
            ],
        ),
        migrations.CreateModel(
            name='Order_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.family')),
                ('order_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.order')),
            ],
        ),
        migrations.CreateModel(
            name='Genus_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.genus')),
                ('species_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.species')),
            ],
        ),
        migrations.CreateModel(
            name='Family_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.family')),
                ('genus_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.genus')),
            ],
        ),
        migrations.AddField(
            model_name='family',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.order'),
        ),
        migrations.CreateModel(
            name='Domain_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.domain')),
                ('phylum_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.phylum')),
            ],
        ),
        migrations.CreateModel(
            name='Class_Child',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.class')),
                ('order_child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.order')),
            ],
        ),
        migrations.AddField(
            model_name='class',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Taxonomy.phylum'),
        ),
    ]
